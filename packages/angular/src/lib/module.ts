import { Config } from "@web-component-wrapper/core";
import { dirname, join } from "path";
import { existsSync, mkdirSync, writeFileSync } from "fs";
import { AngularComponent } from "./component";
import { AngularComponentsOptions } from "./generator";
import { version } from '../../package.json';

export class AngularModule {
  constructor(private components: AngularComponent[], private options: AngularComponentsOptions) {}

  get generatedFileName(): string {
    return `components.module.ts`;
  }
  
  private removeTsExtension(fileName: string): string {
    return fileName.replace('.ts', '');
  }

  get componentsImports(): string {
    return this.components.map(component => `import {${component.generatedComponentClassName}} from './${this.removeTsExtension(component.generatedFileName)}'`).join('\n');
  }
  
  get componentsExports(): string {
    return this.components.map(component => `export { ${component.generatedComponentClassName} }`).join('\n');
  }

  get webcomponentExports(): string {
    return this.components.map(component => `export * as ${component.webComponentClassName} from './${this.removeTsExtension(component.generatedFileName)}'`).join('\n');
  }

  get componentsNames(): string {
    return this.components.map(component => component.generatedComponentClassName).join(',\n    ');
  }
  

  get fileContent(): string {

    return `
// Generated by web-component-angular-wrapper@${version}
import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';
${this.componentsImports}
${this.componentsExports}
${this.webcomponentExports}

const COMPONENTS = [
    ${this.componentsNames}
]

@NgModule({
    declarations: COMPONENTS,
    exports: COMPONENTS,
    schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class ${this.options.angularModuleClassName} {}
    `
  }

  generate(config: Config) {
    const destFilePath = join(config.dist, this.generatedFileName);

    if (!existsSync(dirname(destFilePath))) {
      mkdirSync(dirname(destFilePath), { recursive: true });
    }
    
    writeFileSync(destFilePath, this.fileContent, { encoding: 'utf-8'});
  }
}
