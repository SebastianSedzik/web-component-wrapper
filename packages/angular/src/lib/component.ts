import { basename, join } from "path";
import { existsSync, mkdirSync, writeFileSync } from "fs";
import { paramCase } from 'change-case';
import { format } from 'prettier';
import { ComponentMetadata, Config } from '@web-component-wrapper/core';
import { version } from '../../package.json';

const description = (description: string | undefined) => description ? `/** ${description} */` : '';

export class AngularComponent {
  constructor(private webComponentMetadata: ComponentMetadata, private config: Config) {}

  get distDir(): string {
    return join(this.config.dist, paramCase(this.webComponentMetadata.className))
  }

  get componentFilePath(): string {
    return join(this.distDir, `${paramCase(this.webComponentMetadata.className)}.ts`);
  }

  private async generateWebComponentProviderFile() {
    const { code: webComponentProviderCode } = this.config.webComponentProvider(this.webComponentMetadata);
    const formattedCode = await format(webComponentProviderCode, { parser: 'babel-ts' });

    writeFileSync(join(this.distDir, 'web-component-provider.ts'), formattedCode, { encoding: 'utf-8'});
  }

  private async generateAngularComponentFile() {
    const { tagName } = this.config.webComponentProvider(this.webComponentMetadata);

    const content = `
    /** Generated by web-component-angular-wrapper@${version} */
    import { Directive, Input, Output, HostBinding, EventEmitter } from '@angular/core';
    import './web-component-provider';
    ${this.webComponentMetadata.typings}
    
    ${description(this.webComponentMetadata.description)}
    @Directive({
      selector: '${tagName}',
      standalone: true
    })
    export class ${this.webComponentMetadata.className} {

      ${this.webComponentMetadata.properties.map(property => `
        ${description(property.description)}
        @Input()
        @HostBinding('attr.${property.name}')
        ${property.name}${property.default ? '' : '?'}${ property.type ? `: ${property.type} ` : ''}${ property.default ? ` = ${property.default}` : ''};
      `).join('')}

      ${this.webComponentMetadata.events.map(event => `
        ${description(event.description)}
        @Output()
        "${event.name}" = new EventEmitter<${event.type}>()
      `).join('')}
    }`

    const formattedCode = await format(content, { parser: 'babel-ts' });

    writeFileSync(this.componentFilePath, formattedCode, { encoding: 'utf-8'});
  }

  private generateNgPackagrEntryFile() {
    const ngPackagrConfig = {
      "lib": { entryFile: basename(this.componentFilePath) }
    }

    writeFileSync(
      join(this.distDir, 'ng-package.json'),
      JSON.stringify(ngPackagrConfig, null, 2),
      { encoding: 'utf-8' }
    );
  }

  async generate() {
    if (!existsSync(this.distDir)) {
      mkdirSync(this.distDir, { recursive: true });
    }

    await this.generateWebComponentProviderFile();
    await this.generateAngularComponentFile();
    this.generateNgPackagrEntryFile();
  }
}
