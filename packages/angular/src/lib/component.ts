import { dirname, join } from "path";
import { existsSync, mkdirSync, writeFileSync } from "fs";
import { paramCase } from 'change-case';
import { ComponentMetadata, Config, ComponentPropertyMetadata, ComponentEventMetadata } from '@web-component-wrapper/core';
import { version } from '../../package.json';

export class AngularComponent {
  constructor(private webComponentMetadata: ComponentMetadata, private config: Config) {}

  get webComponentClassName(): string {
    return this.webComponentMetadata.className;
  }

  get inputs(): string {
    const description = (property: ComponentPropertyMetadata): string => property.description ? `  /** ${property.description} */` : '';
    const inputOptional = (property: ComponentPropertyMetadata): string => `
    @Input()
    @HostBinding('attr.${property.name}')
    ${property.name}!: ${property.type};
    `;

    const inputDefault = (property: ComponentPropertyMetadata): string => `
    @Input()
    @HostBinding('attr.${property.name}')
    ${property.name}: ${property.type} = ${typeof property.default === 'string' ? `"${property.default}"` : JSON.stringify(property.default) };
    `;
  
    const createInput = (property: ComponentPropertyMetadata): string => [
      description(property),
      property.default ? inputDefault(property) : inputOptional(property),
      ''
    ].join('\n');
    
    return this.webComponentMetadata.properties.map(createInput).join('');
  }
  
  get outputs(): string {
    const description = (event: ComponentEventMetadata): string => event.description ? `  /** ${event.description} */` : '';
    const output = (event: ComponentEventMetadata): string => `  @Output() "${event.name}" = new EventEmitter<${event.type}>();`;
    
    const createOutput = (event: ComponentEventMetadata): string => [
      description(event),
      output(event),
      ''
    ].join('\n');
    
    return this.webComponentMetadata.events.map(createOutput).join('');
  }
  
  get fileContent(): string {
    const { code: webComponentProviderCode, tagName: webComponentTagName } = this.config.webComponentProvider(this.webComponentMetadata);

    return `
// Generated by web-component-angular-wrapper@${version}
import { Directive, Input, Output, HostBinding, EventEmitter } from '@angular/core';
${webComponentProviderCode}
${this.webComponentMetadata.typings}

${this.webComponentMetadata.description ? `/** ${this.webComponentMetadata.description} */` : ''}
@Directive({
  selector: '${webComponentTagName}',
  standalone: true
})
export class ${this.generatedComponentClassName} {
${this.inputs}
${this.outputs}
}
`;
  }
  
  get generatedComponentClassName(): string {
    return `${this.webComponentMetadata.className}Component`
  }
  
  get generatedFilePath(): string {
    return join(
      this.config.dist,
      paramCase(this.webComponentMetadata.className),
      this.generatedFileName
    );
  }

  get generatedFileName(): string {
    return `${paramCase(this.webComponentMetadata.className)}.ts`;
  }
  
  generate() {
    if (!existsSync(dirname(this.generatedFilePath))) {
      mkdirSync(dirname(this.generatedFilePath), { recursive: true });
    }

    writeFileSync(this.generatedFilePath, this.fileContent, { encoding: 'utf-8'});
  }
}
